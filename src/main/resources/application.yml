spring:
  application:
    name: gateway
  main:
    web-application-type: reactive
  cloud:
    gateway:
      httpclient:
        ssl:
          use-insecure-trust-manager: true
      #TODO: 지금은 전부다 허용하지만 추후 application 별로 cors 정책을 다르게 가져간다.
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowedHeaders: "*"
            allowCredentials: false
      default-filters:
        - AddRequestHeader=X-Request-ID, ${random.uuid}
        - name: AuthenticateGrpcFilter
      routes:
        - id: auth-server-route
          uri: lb://${network.services.auth.name}
          predicates:
            - Host=woo-auth.duckdns.org
        - id: bbr-backend-route
          uri: lb://${network.services.bbr.name}
          predicates:
            - Host=wooyoung.duckdns.org
        - id: fmp-backend-route
          uri: lb://${network.services.fmp.name}
          predicates:
            - Host=find-my-pet.duckdns.org
        - id: auth-server-path-route
          uri: lb://${network.services.auth.name}
          predicates:
            - Path=/api/v1/auth/**, /oauth2/**
          order: 0
        - id: storage-route
          uri: lb://${network.services.storage.name}
          predicates:
            - Host=cdn.platformholder.site
        - id: forest
          uri: lb://${network.services.forest.name}
          predicates:
            - Host=forest.platformholder.site
#        - id: test
#          uri: grpc://${network.services.auth.host  }:9090
#          predicates:
#            - Path=/test/**
#          filters:
#            - name: CustomJsonToGrpcFilter
#              args:
#                protoDescriptor: classpath:proto/test.pb
#                protoFile: classpath:proto/test.proto
#                service: GrpcTestService
#                method: GrpcTest

  profiles:
    active: dev
network:
  services:
    bbr:
      host: ${BBR_HOST:bbr}
      name: ${BBR_NAME:bbr}
    fmp:
      host: ${FMP_HOST:fmp}
      name: ${FMP_NAME:fmp}
    auth:
      host: ${AUTH_HOST:localhost}
      name: ${AUTH_NAME:auth}
    storage:
      host: ${STORAGE_HOST}
      name: ${STORAGE_NAME}
    forest:
      host: ${FOREST_HOST}
      name: ${FOREST_NAME}
    port: ${SERVICE_PORT:8080}
logging:
  level:
    org.woo.gateway: INFO

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus

eureka:
  client:
    register-with-eureka: false
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
server:
  http2:
    enabled: true
#  port: 8081

grpc:
  client:
    GLOBAL:
      negotiation-type: plaintext
